{"version":3,"sources":["components/Main/Login/Login.module.scss","assets/image/refresh.svg","components/Main/Login/LoginForm.js","components/Main/Login/Login.js","utilities/useScrollToTop.js"],"names":["module","exports","LoginFormValidationSchema","yup","shape","email","required","max","password","validateCaptcha","value","error","length","LoginForm","props","loading","Preloader","initialValues","rememberMe","captcha","validationSchema","onSubmit","actions","handleSubmit","errors","touched","values","isSubmitting","status","handleReset","setFieldValue","className","styles","inputWrap","textField","name","type","as","TextField","placeholder","Boolean","emailServer","label","variant","helperText","FormControl","passwordServer","InputLabel","htmlFor","id","OutlinedInput","passwordShown","labelWidth","endAdornment","InputAdornment","position","IconButton","onMouseDown","Visibility","VisibilityOff","FormHelperText","checkboxWrap","FormControlLabel","control","Checkbox","color","captchaUrl","captchaImg","onClick","getCaptcha","src","refreshImg","alt","captchaServer","validate","buttons","Button","disabled","connect","state","isAuth","auth","authUserId","userId","signIn","getAuthUserData","useScrollToTop","useState","setLoading","a","setStatus","resetForm","setErrors","to","loginContainer","greeting","pathname","useLocation","useEffect","window","scrollTo"],"mappings":"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","file":"static/js/12.7283036e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__73dZ_\",\"greeting\":\"Login_greeting__3j1Aq\",\"textField\":\"Login_textField__24Mqm\",\"inputWrap\":\"Login_inputWrap__3WCBf\",\"checkboxWrap\":\"Login_checkboxWrap__KZ-W6\",\"captcha\":\"Login_captcha__JkvBf\",\"captchaImg\":\"Login_captchaImg__2uuVp\",\"buttons\":\"Login_buttons__2U3JT\",\"error\":\"Login_error__1tL77\"};","module.exports = __webpack_public_path__ + \"static/media/refresh.8c6e329c.svg\";","import React from 'react';\r\nimport styles from './Login.module.scss';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport * as yup from 'yup';\r\nimport { Formik, Field } from 'formik';\r\nimport Button from '@material-ui/core/Button';\r\nimport {\r\n\tTextField,\r\n\tInputAdornment,\r\n\tIconButton,\r\n\tFormControl,\r\n\tInputLabel,\r\n\tOutlinedInput,\r\n\tFormHelperText,\r\n\tCheckbox,\r\n\tFormControlLabel,\r\n} from '@material-ui/core';\r\nimport { Visibility, VisibilityOff } from '@material-ui/icons';\r\n\r\nconst LoginFormValidationSchema = yup.object().shape({\r\n\temail: yup\r\n\t\t.string()\r\n\t\t.email('Must be a valid email')\r\n\t\t.required('Required')\r\n\t\t.max(30, 'Must be 30 characters or less'),\r\n\tpassword: yup\r\n\t\t.string()\r\n\t\t.required('Required')\r\n\t\t.max(30, 'Must be 30 characters or less'),\r\n});\r\n\r\n// Отдельная валидация для капчи, когда сервер запрашивает капчу,\r\n// нужно повесить Required, если сделать это в общей валидации,\r\n// форма не будет отправляться, даже если сервер еще не запросил капчу\r\n// и поле для ее ввода еще не отобразилось\r\nconst validateCaptcha = (value) => {\r\n\tlet error;\r\n\tif (!value) {\r\n\t\terror = 'Required';\r\n\t} else if (value.length > 15) {\r\n\t\terror = 'Must be 30 characters or less';\r\n\t}\r\n\treturn error;\r\n};\r\n\r\nconst LoginForm = (props) => (\r\n\t<>\r\n\t\t{props.loading && <Preloader />}\r\n\t\t<Formik\r\n\t\t\tinitialValues={{\r\n\t\t\t\trememberMe: true,\r\n\t\t\t\temail: '',\r\n\t\t\t\tpassword: '',\r\n\t\t\t\tcaptcha: '',\r\n\t\t\t}}\r\n\t\t\tvalidationSchema={LoginFormValidationSchema}\r\n\t\t\tonSubmit={({ email, password, rememberMe, captcha }, actions) =>\r\n\t\t\t\tprops.onSubmit({ email, password, rememberMe, captcha }, actions)\r\n\t\t\t}\r\n\t\t>\r\n\t\t\t{({\r\n\t\t\t\thandleSubmit,\r\n\t\t\t\terrors,\r\n\t\t\t\ttouched,\r\n\t\t\t\tvalues,\r\n\t\t\t\tisSubmitting,\r\n\t\t\t\tstatus,\r\n\t\t\t\thandleReset,\r\n\t\t\t\tsetFieldValue,\r\n\t\t\t}) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t\t\t<div className={styles.inputWrap}>\r\n\t\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\t\tclassName={styles.textField}\r\n\t\t\t\t\t\t\t\tname=\"email\"\r\n\t\t\t\t\t\t\t\ttype=\"email\"\r\n\t\t\t\t\t\t\t\tas={TextField}\r\n\t\t\t\t\t\t\t\tplaceholder=\"Enter your email\"\r\n\t\t\t\t\t\t\t\terror={Boolean(\r\n\t\t\t\t\t\t\t\t\t(errors.email && touched.email) || errors.emailServer\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\tlabel=\"Email\"\r\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\t\thelperText={touched.email && errors.email}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={styles.inputWrap}>\r\n\t\t\t\t\t\t\t<FormControl\r\n\t\t\t\t\t\t\t\tclassName={styles.textField}\r\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\t\terror={\r\n\t\t\t\t\t\t\t\t\tBoolean(errors.password && touched.password) ||\r\n\t\t\t\t\t\t\t\t\terrors.passwordServer\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<InputLabel htmlFor=\"sign-in-password\">Password</InputLabel>\r\n\t\t\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\t\t\tid=\"sign-in-password\"\r\n\t\t\t\t\t\t\t\t\tname=\"password\"\r\n\t\t\t\t\t\t\t\t\tas={OutlinedInput}\r\n\t\t\t\t\t\t\t\t\ttype={values.passwordShown ? 'text' : 'password'}\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"Enter your password\"\r\n\t\t\t\t\t\t\t\t\tlabelWidth={65}\r\n\t\t\t\t\t\t\t\t\tendAdornment={\r\n\t\t\t\t\t\t\t\t\t\t<InputAdornment position=\"end\">\r\n\t\t\t\t\t\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\t\t\t\t\t\tonMouseDown={() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (values.passwordShown) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue('passwordShown', false);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetFieldValue('passwordShown', true);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{values.passwordShown ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Visibility />\r\n\t\t\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<VisibilityOff />\r\n\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t</InputAdornment>\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<FormHelperText>\r\n\t\t\t\t\t\t\t\t\t{touched.password && errors.password}\r\n\t\t\t\t\t\t\t\t</FormHelperText>\r\n\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={styles.checkboxWrap}>\r\n\t\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\t\tlabel=\"Remember me\"\r\n\t\t\t\t\t\t\t\tcontrol={\r\n\t\t\t\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\t\t\t\t\tas={Checkbox}\r\n\t\t\t\t\t\t\t\t\t\tname=\"rememberMe\"\r\n\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{props.captchaUrl && (\r\n\t\t\t\t\t\t\t<div className={styles.captcha}>\r\n\t\t\t\t\t\t\t\t<div className={styles.captchaImg}>\r\n\t\t\t\t\t\t\t\t\t<button type=\"button\" onClick={props.getCaptcha}>\r\n\t\t\t\t\t\t\t\t\t\t<img src={props.refreshImg} alt=\"\" />\r\n\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t<img src={props.captchaUrl} alt=\"Captcha\" />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\t\t\t\tclassName={styles.textField}\r\n\t\t\t\t\t\t\t\t\t\tas={TextField}\r\n\t\t\t\t\t\t\t\t\t\tname=\"captcha\"\r\n\t\t\t\t\t\t\t\t\t\tlabel={'Type the characters above'}\r\n\t\t\t\t\t\t\t\t\t\terror={Boolean(\r\n\t\t\t\t\t\t\t\t\t\t\t(errors.captcha && touched.captcha) ||\r\n\t\t\t\t\t\t\t\t\t\t\t\terrors.captchaServer\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\tvalidate={validateCaptcha}\r\n\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\t\t\t\thelperText={touched.captcha && errors.captcha}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t<div className={styles.buttons}>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\t\tdisabled={isSubmitting}\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tLog in\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tonClick={handleReset}\r\n\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\tdisabled={isSubmitting}\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tReset\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={styles.error}>{status}</div>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t);\r\n\t\t\t}}\r\n\t\t</Formik>\r\n\t</>\r\n);\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport {\r\n\tgetAuthUserData,\r\n\tsignIn,\r\n\tgetCaptcha,\r\n} from '../../../redux/reducers/authReducer';\r\nimport styles from './Login.module.scss';\r\nimport LoginForm from './LoginForm';\r\nimport refreshImg from '../../../assets/image/refresh.svg';\r\nimport useScrollToTop from '../../../utilities/useScrollToTop';\r\n\r\nconst Login = (props) => {\r\n\tuseScrollToTop();\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst onSubmit = async (values, actions) => {\r\n\t\tactions.setStatus();\r\n\t\tsetLoading(true);\r\n\t\tconst error = await props.signIn(values);\r\n\t\tactions.resetForm({\r\n\t\t\tvalues: {\r\n\t\t\t\trememberMe: true,\r\n\t\t\t\tpasswordShown: false,\r\n\t\t\t\temail: values.email,\r\n\t\t\t\tpassword: values.password,\r\n\t\t\t\tcaptcha: '',\r\n\t\t\t},\r\n\t\t});\r\n\t\tsetLoading(false);\r\n\t\tif (error) {\r\n\t\t\tconst errors = {};\r\n\t\t\tactions.setStatus(error);\r\n\t\t\tif (error === 'Incorrect Email or Password') {\r\n\t\t\t\terrors.emailServer = 'Incorrect Email or Password';\r\n\t\t\t\terrors.passwordServer = 'Incorrect Email or Password';\r\n\t\t\t\tactions.setErrors(errors);\r\n\t\t\t}\r\n\t\t\tif (error === 'Incorrect anti-bot symbols') {\r\n\t\t\t\terrors.captchaServer = 'Incorrect anti-bot symbols';\r\n\t\t\t\tactions.setErrors(errors);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\treturn props.isAuth ? (\r\n\t\t<Redirect to={`/profile/${props.authUserId}`} />\r\n\t) : (\r\n\t\t<div className={styles.loginContainer}>\r\n\t\t\t<div className={styles.greeting}>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tWelcome! For future use, enter the following data for authorization:\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tEmail: <mark>free@samuraijs.com</mark>\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tPassword: <mark>free</mark>\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<LoginForm\r\n\t\t\t\trefreshImg={refreshImg}\r\n\t\t\t\tcaptchaUrl={props.captchaUrl}\r\n\t\t\t\tonSubmit={onSubmit}\r\n\t\t\t\tloading={loading}\r\n\t\t\t\tgetCaptcha={props.getCaptcha}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tisAuth: state.auth.isAuth,\r\n\tauthUserId: state.auth.userId,\r\n\tcaptchaUrl: state.auth.captchaUrl,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n\tsignIn,\r\n\tgetAuthUserData,\r\n\tgetCaptcha,\r\n})(Login);\r\n","import { useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst useScrollToTop = () => {\r\n\tconst { pathname } = useLocation();\r\n\r\n\tuseEffect(() => {\r\n\t\twindow.scrollTo(0, 0);\r\n\t}, [pathname]);\r\n\r\n\treturn null;\r\n}\r\n\r\nexport default useScrollToTop"],"sourceRoot":""}