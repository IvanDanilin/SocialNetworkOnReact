{"version":3,"sources":["components/Main/Login/LoginForm.js","components/Main/Login/Login.js","utilities/validators/validators.js","components/common/FormControls/FormControls.js","components/Main/Login/Login.module.scss"],"names":["LoginForm","props","initialValues","rememberMe","passwordShown","email","password","onSubmit","render","handleSubmit","pristine","form","submitting","submitError","values","loading","Preloader","name","component","Input","placeholder","validate","fullValidation","type","disabled","onClick","reset","className","styles","error","connect","state","isAuth","auth","authUserId","userId","signIn","getAuthUserData","useState","setLoading","a","FORM_ERROR","to","loginContainer","min","max","mess","validators","value","reduce","validator","undefined","composeValidators","length","minLength","maxLength","message","FormControl","input","meta","Element","element","touched","Textarea","module","exports"],"mappings":"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","file":"static/js/6.0652a6be.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Field, Form } from 'react-final-form';\r\nimport { fullValidation } from '../../../utilities/validators/validators';\r\nimport { Input } from '../../common/FormControls/FormControls';\r\nimport styles from './Login.module.scss';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\n\r\nconst LoginForm = (props) => (\r\n\t<Form\r\n\t\tinitialValues={{\r\n\t\t\trememberMe: true,\r\n\t\t\tpasswordShown: false,\r\n\t\t\temail: 'free@samuraijs.com',\r\n\t\t\tpassword: 'free'\r\n\t\t}}\r\n\t\tonSubmit={({ email, password, rememberMe }) =>\r\n\t\t\tprops.onSubmit({ email, password, rememberMe })\r\n\t\t}\r\n\t\trender={({\r\n\t\t\thandleSubmit,\r\n\t\t\tpristine,\r\n\t\t\tform,\r\n\t\t\tsubmitting,\r\n\t\t\tsubmitError,\r\n\t\t\tvalues,\r\n\t\t}) => (\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t{props.loading && <Preloader />}\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Field\r\n\t\t\t\t\t\tname='email'\r\n\t\t\t\t\t\tcomponent={Input}\r\n\t\t\t\t\t\tplaceholder='Enter your email'\r\n\t\t\t\t\t\tvalidate={fullValidation(3, 30, 'Required field')}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Field\r\n\t\t\t\t\t\tname='password'\r\n\t\t\t\t\t\tcomponent={Input}\r\n\t\t\t\t\t\ttype={values.passwordShown ? 'text' : 'password'}\r\n\t\t\t\t\t\tplaceholder='Enter your password'\r\n\t\t\t\t\t\tvalidate={fullValidation(3, 30, 'Required field')}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\t<Field type='checkbox' component='input' name='passwordShown' />{' '}\r\n\t\t\t\t\t\tShow password\r\n\t\t\t\t\t</label>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\t<Field type='checkbox' component='input' name='rememberMe' />{' '}\r\n\t\t\t\t\t\tRemember me\r\n\t\t\t\t\t</label>\r\n\t\t\t\t</div>\r\n\t\t\t\t<button type='submit' disabled={submitting}>\r\n\t\t\t\t\tLog in\r\n\t\t\t\t</button>\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype='button'\r\n\t\t\t\t\tdisabled={pristine || submitting}\r\n\t\t\t\t\tonClick={form.reset}\r\n\t\t\t\t>\r\n\t\t\t\t\tClear\r\n\t\t\t\t</button>\r\n\t\t\t\t{submitError && <div className={styles.error}>{submitError}</div>}\r\n\t\t\t</form>\r\n\t\t)}\r\n\t/>\r\n);\r\n\r\nexport default LoginForm;\r\n","import { FORM_ERROR } from 'final-form';\r\nimport React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { getAuthUserData, signIn } from '../../../redux/reducers/authReducer';\r\nimport styles from './Login.module.scss';\r\nimport LoginForm from './LoginForm';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\n\r\nconst Login = (props) => {\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst onSubmit = async (values) => {\r\n\t\tsetLoading(true);\r\n\t\tconst error = await props.signIn(values);\r\n\t\tsetLoading(false);\r\n\t\tif (error) {\r\n\t\t\treturn { [FORM_ERROR]: error };\r\n\t\t}\r\n\t};\r\n\r\n\treturn props.isAuth ? (\r\n\t\t<Redirect to={`/profile/${props.authUserId}`} />\r\n\t) : (\r\n\t\t<div className={styles.loginContainer}>\r\n\t\t\t<LoginForm onSubmit={onSubmit} loading={loading} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tisAuth: state.auth.isAuth,\r\n\tauthUserId: state.auth.userId,\r\n});\r\n\r\nexport default connect(mapStateToProps, { signIn, getAuthUserData })(Login);\r\n","const required = (message) => (value) => (value ? undefined : message);\r\n\r\nconst maxLength = (max) => (value) =>\r\n\tvalue && value.length > max ? `Max length is ${max} symbols` : undefined;\r\n\r\nconst minLength = (min) => (value) =>\r\n\tvalue && value.length < min ? `Min length is ${min} symbols` : undefined;\r\n\r\nconst composeValidators = (...validators) => (value) =>\r\n\tvalidators.reduce((error, validator) => error || validator(value), undefined);\r\n\r\nexport const fullValidation = (min, max, mess) =>\r\n\tcomposeValidators(minLength(min), maxLength(max), required(mess));\r\n","import React from 'react';\r\n\r\n// Компонент возвращающий поле для ввода, применяется в Field\r\n// Принимает данные ввода и мета-данные (ошибки и тд.)\r\nconst FormControl = ({ input, meta, ...props }) => {\r\n\t// Принимает в пропсах нужное поле ввода (input, textarea...)\r\n\tconst Element = props.element;\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{/* Создание поля ввода и передача в него данных */}\r\n\t\t\t<Element {...input} placeholder={props.placeholder} />\r\n\t\t\t{/* Вывод на основании ошибок валидации */}\r\n\t\t\t{meta.error &&\r\n\t\t\t\t// Если есть ошибка и введено больше 5 символов, выводит ошибку\r\n\t\t\t\t(input.value.length > 5 ? (\r\n\t\t\t\t\t<span>{meta.error}</span>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t// Если есть ошибка, но символов меньше 5, выводит ошибку когда поле было затронуто\r\n\t\t\t\t\tmeta.touched && <span>{meta.error}</span>\r\n\t\t\t\t))}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\n// Компоненты для создания конкретных полей ввода\r\nexport const Input = (props) => {\r\n\treturn <FormControl element=\"input\" {...props} />;\r\n};\r\nexport const Textarea = (props) => (\r\n\t<FormControl element=\"textarea\" {...props} />\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__3equC\",\"error\":\"Login_error__PSmDI\"};"],"sourceRoot":""}