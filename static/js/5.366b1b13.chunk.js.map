{"version":3,"sources":["components/Main/Login/Login.module.scss","assets/image/refresh.svg","components/Main/Login/LoginForm.js","components/Main/Login/Login.js","components/common/FormControls/FormControls.js","components/common/FormControls/FormControls.module.scss"],"names":["module","exports","LoginFormValidationSchema","yup","shape","email","required","max","password","validateCaptcha","value","error","length","LoginForm","props","loading","Preloader","initialValues","rememberMe","passwordShown","captcha","validationSchema","onSubmit","actions","handleSubmit","errors","touched","values","isSubmitting","status","handleReset","className","styles","inputWrap","name","type","as","Input","placeholder","serverError","captchaUrl","captchaImg","onClick","getCaptcha","src","refreshImg","alt","textInputWrap","validate","buttons","disabled","connect","state","isAuth","auth","authUserId","userId","signIn","getAuthUserData","useState","setLoading","a","setStatus","resetForm","to","loginContainer","greeting","FormControl","Element","element","errorStyle","setErrorStyle","useEffect","errorStyleTimeout","setTimeout","clearTimeout","console","log","cn","defaultElement","Textarea"],"mappings":"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","file":"static/js/5.366b1b13.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__3equC\",\"greeting\":\"Login_greeting__12QKJ\",\"captcha\":\"Login_captcha__e5Agc\",\"captchaImg\":\"Login_captchaImg__nBeoh\",\"buttons\":\"Login_buttons__5xyr1\",\"error\":\"Login_error__PSmDI\"};","module.exports = __webpack_public_path__ + \"static/media/refresh.8c6e329c.svg\";","import React from 'react';\r\nimport { Input } from '../../common/FormControls/FormControls';\r\nimport styles from './Login.module.scss';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport * as yup from 'yup';\r\nimport { Formik, Field } from 'formik';\r\n\r\nconst LoginFormValidationSchema = yup.object().shape({\r\n\temail: yup\r\n\t\t.string()\r\n\t\t.email()\r\n\t\t.required('Required')\r\n\t\t.max(30, 'Must be 30 characters or less'),\r\n\tpassword: yup\r\n\t\t.string()\r\n\t\t.required('Required')\r\n\t\t.max(30, 'Must be 30 characters or less'),\r\n});\r\n\r\nconst validateCaptcha = (value) => {\r\n\tlet error;\r\n\tif (!value) {\r\n\t\terror = 'Required';\r\n\t} else if (value.length > 15) {\r\n\t\terror = 'Must be 30 characters or less';\r\n\t}\r\n\treturn error;\r\n};\r\n\r\nconst LoginForm = (props) => (\r\n\t<>\r\n\t\t{props.loading && <Preloader />}\r\n\t\t<Formik\r\n\t\t\tinitialValues={{\r\n\t\t\t\trememberMe: true,\r\n\t\t\t\tpasswordShown: false,\r\n\t\t\t\temail: '',\r\n\t\t\t\tpassword: '',\r\n\t\t\t\tcaptcha: '',\r\n\t\t\t}}\r\n\t\t\tvalidationSchema={LoginFormValidationSchema}\r\n\t\t\tonSubmit={({ email, password, rememberMe, captcha }, actions) =>\r\n\t\t\t\tprops.onSubmit({ email, password, rememberMe, captcha }, actions)\r\n\t\t\t}\r\n\t\t>\r\n\t\t\t{({\r\n\t\t\t\thandleSubmit,\r\n\t\t\t\terrors,\r\n\t\t\t\ttouched,\r\n\t\t\t\tvalues,\r\n\t\t\t\tisSubmitting,\r\n\t\t\t\tstatus,\r\n\t\t\t\thandleReset,\r\n\t\t\t}) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t\t\t<div className={styles.inputWrap}>\r\n\t\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\t\tname='email'\r\n\t\t\t\t\t\t\t\ttype='email'\r\n\t\t\t\t\t\t\t\tas={Input}\r\n\t\t\t\t\t\t\t\tplaceholder='Enter your email'\r\n\t\t\t\t\t\t\t\terror={errors.email}\r\n\t\t\t\t\t\t\t\ttouched={touched.email}\r\n\t\t\t\t\t\t\t\tserverError={status === 'Incorrect Email or Password'}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={styles.inputWrap}>\r\n\t\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\t\tname='password'\r\n\t\t\t\t\t\t\t\tas={Input}\r\n\t\t\t\t\t\t\t\ttype={values.passwordShown ? 'text' : 'password'}\r\n\t\t\t\t\t\t\t\tplaceholder='Enter your password'\r\n\t\t\t\t\t\t\t\terror={errors.password}\r\n\t\t\t\t\t\t\t\ttouched={touched.password}\r\n\t\t\t\t\t\t\t\tserverError={status === 'Incorrect Email or Password'}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={styles.inputWrap}>\r\n\t\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t\t<Field type='checkbox' name='passwordShown' /> Show password\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={styles.inputWrap}>\r\n\t\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t\t<Field type='checkbox' name='rememberMe' /> Remember me\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{props.captchaUrl && (\r\n\t\t\t\t\t\t\t<div className={styles.captcha}>\r\n\t\t\t\t\t\t\t\t<div className={styles.captchaImg}>\r\n\t\t\t\t\t\t\t\t\t<button type='button' onClick={props.getCaptcha}>\r\n\t\t\t\t\t\t\t\t\t\t<img src={props.refreshImg} alt='' />\r\n\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t<img src={props.captchaUrl} alt='Captcha' />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className={styles.textInputWrap}>\r\n\t\t\t\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\t\t\t\tas={Input}\r\n\t\t\t\t\t\t\t\t\t\tname='captcha'\r\n\t\t\t\t\t\t\t\t\t\tplaceholder={'Type the characters above'}\r\n\t\t\t\t\t\t\t\t\t\terror={errors.captcha}\r\n\t\t\t\t\t\t\t\t\t\ttouched={touched.captcha}\r\n\t\t\t\t\t\t\t\t\t\tvalidate={validateCaptcha}\r\n\t\t\t\t\t\t\t\t\t\tserverError={status === 'Incorrect anti-bot symbols'}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t<div className={styles.buttons}>\r\n\t\t\t\t\t\t\t<button type='submit' disabled={isSubmitting}>\r\n\t\t\t\t\t\t\t\tLog in\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tonClick={handleReset}\r\n\t\t\t\t\t\t\t\ttype='button'\r\n\t\t\t\t\t\t\t\tdisabled={isSubmitting}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tReset\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={styles.error}>{status}</div>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t);\r\n\t\t\t}}\r\n\t\t</Formik>\r\n\t</>\r\n);\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport {\r\n\tgetAuthUserData,\r\n\tsignIn,\r\n\tgetCaptcha,\r\n} from '../../../redux/reducers/authReducer';\r\nimport styles from './Login.module.scss';\r\nimport LoginForm from './LoginForm';\r\nimport refreshImg from '../../../assets/image/refresh.svg';\r\n\r\nconst Login = (props) => {\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst onSubmit = async (values, actions) => {\r\n\t\tactions.setStatus();\r\n\t\tsetLoading(true);\r\n\t\tconst error = await props.signIn(values);\r\n\t\tactions.resetForm({\r\n\t\t\tvalues: {\r\n\t\t\t\trememberMe: true,\r\n\t\t\t\tpasswordShown: false,\r\n\t\t\t\temail: values.email,\r\n\t\t\t\tpassword: values.password,\r\n\t\t\t\tcaptcha: '',\r\n\t\t\t},\r\n\t\t});\r\n\t\tsetLoading(false);\r\n\t\tif (error) {\r\n\t\t\tactions.setStatus(error);\r\n\t\t}\r\n\t};\r\n\r\n\treturn props.isAuth ? (\r\n\t\t<Redirect to={`/profile/${props.authUserId}`} />\r\n\t) : (\r\n\t\t<div className={styles.loginContainer}>\r\n\t\t\t<div className={styles.greeting}>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tWelcome! For future use, enter the following data for authorization:\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tEmail: <mark>free@samuraijs.com</mark>\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tPassword: <mark>free</mark>\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<LoginForm\r\n\t\t\t\trefreshImg={refreshImg}\r\n\t\t\t\tcaptchaUrl={props.captchaUrl}\r\n\t\t\t\tonSubmit={onSubmit}\r\n\t\t\t\tloading={loading}\r\n\t\t\t\tgetCaptcha={props.getCaptcha}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tisAuth: state.auth.isAuth,\r\n\tauthUserId: state.auth.userId,\r\n\tcaptchaUrl: state.auth.captchaUrl,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n\tsignIn,\r\n\tgetAuthUserData,\r\n\tgetCaptcha,\r\n})(Login);\r\n","import React, { useEffect, useState } from 'react';\r\nimport styles from './FormControls.module.scss';\r\nimport cn from 'classnames';\r\n\r\n// Компонент возвращающий поле для ввода, применяется в Field\r\n// Принимает данные ввода и мета-данные (ошибки и тд.)\r\nconst FormControl = ({ error, touched, serverError, ...props }) => {\r\n\t// Принимает в пропсах нужное поле ввода (input, textarea...)\r\n\tconst Element = props.element;\r\n\r\n\tconst [errorStyle, setErrorStyle] = useState(false);\r\n\tuseEffect(() => {\r\n\t\tlet errorStyleTimeout;\r\n\t\tif (error && touched) {\r\n\t\t\tsetErrorStyle(true);\r\n\t\t\terrorStyleTimeout = setTimeout(() => {\r\n\t\t\t\tsetErrorStyle(false);\r\n\t\t\t}, 1000);\r\n\t\t}\r\n\t\treturn () => clearTimeout(errorStyleTimeout);\r\n\t}, [error, touched]);\r\n\r\n\tuseEffect(() => {\r\n\t\tlet errorStyleTimeout;\r\n\t\tif (serverError) {\r\n\t\t\tsetErrorStyle(true);\r\n\t\t\terrorStyleTimeout = setTimeout(() => {\r\n\t\t\t\tconsole.log('oh');\r\n\t\t\t\tsetErrorStyle(false);\r\n\t\t\t}, 1000);\r\n\t\t}\r\n\t\treturn () => clearTimeout(errorStyleTimeout);\r\n\t}, [serverError]);\r\n\r\n\treturn (\r\n\t\t<Element\r\n\t\t\t{...props}\r\n\t\t\tclassName={cn([styles.defaultElement], {\r\n\t\t\t\t[styles.error]: errorStyle,\r\n\t\t\t})}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\n// Компоненты для создания конкретных полей ввода\r\nexport const Input = (props) => {\r\n\treturn <FormControl element='input' {...props} />;\r\n};\r\nexport const Textarea = (props) => (\r\n\t<FormControl element='textarea' {...props} />\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"defaultElement\":\"FormControls_defaultElement__3jSSc\",\"error\":\"FormControls_error___hLaz\"};"],"sourceRoot":""}